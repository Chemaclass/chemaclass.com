<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title></title>
	<subtitle>Chema&#x27;s blog.</subtitle>
	<link href="https://chemaclass.es/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://chemaclass.es"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-06-01T00:00:00+00:00</updated>
	<id>https://chemaclass.es/atom.xml</id>
	<entry xml:lang="en">
		<title>Conformity experiments</title>
		<published>2021-06-01T00:00:00+00:00</published>
		<updated>2021-06-01T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/conformity-experiments/" type="text/html"/>
		<id>https://chemaclass.es/blog/conformity-experiments/</id>
		<content type="html">&lt;h4 id=&quot;the-uncomfortable-truth-about-human-nature&quot;&gt;The uncomfortable truth about human nature&lt;&#x2F;h4&gt;
&lt;h1 id=&quot;the-psychologist-solomon-asch&quot;&gt;The psychologist Solomon Asch&lt;&#x2F;h1&gt;
&lt;p&gt;During the early years of World War II, when Hitler was at the height of power, Solomon Asch began studying the impact of propaganda and indoctrination while he was a professor at Brooklyn College‚Äôs psychology department. He also was a professor for 19 years at Swarthmore College.&lt;&#x2F;p&gt;
&lt;p&gt;During the 1950s, Asch became famous for his series of experiments that demonstrated the effects of social pressure on conformity. How far would people go to conform to others in a group? Asch‚Äôs research demonstrated that participants were surprisingly likely to conform to a group, even when they personally believed that the group was incorrect.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;asch-asked&quot;&gt;Asch asked&lt;&#x2F;h2&gt;
&lt;p&gt;To what extent do social forces alter people‚Äôs opinions?
Which aspect of the group influence is most important ‚Äî the size of the majority, or the unanimity of opinion?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Asch believed that people behave according to how they perceive the world, not to how it actually is.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-asch-experiment&quot;&gt;The Asch experiment&lt;&#x2F;h2&gt;
&lt;p&gt;Asch used an experiment to study conformity based on a ‚Äúsimple vision test‚Äù.&lt;&#x2F;p&gt;
&lt;p&gt;Using a line judgment task, Asch put a naive participant in a room with other confederates&#x2F;stooges. The confederates had agreed in advance what their responses were going to be when presented with the line task. Giving intentionally the same wrong answer most of the time.&lt;&#x2F;p&gt;
&lt;p&gt;The real participant didn‚Äôt know this and was led to believe that the other people were also real participants like himself.&lt;&#x2F;p&gt;
&lt;p&gt;Each person in the room had to state aloud which comparison line (A, B, or C) was most like the target line. The answer was always obvious. The real participant sat at the end of the row and gave his answer last.&lt;&#x2F;p&gt;
&lt;p&gt;Asch was interested to see if the real participant would conform to the majority view. The confederates gave the wrong answer most of the time (known as critical trials).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;findings&quot;&gt;Findings&lt;&#x2F;h2&gt;
&lt;p&gt;Nearly 75% of the participants in the conformity experiments went along with the rest of the group at least one time.&lt;&#x2F;p&gt;
&lt;p&gt;Asch also found that having one of the confederates give the correct answer while the rest of the confederates gave the incorrect answer dramatically lowered conformity, which means that having social support is an important tool in combating conformity.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;After combining the trials, the results indicated that participants conformed to the incorrect group answer approximately one-third of the time.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Why did the participants conform so easily? When they were interviewed after the experiment, most of them said that they did not really believe their conforming answers, but had gone along with the group for fear of being ridiculed.&lt;&#x2F;p&gt;
&lt;p&gt;A few of them said that they really did believe the group‚Äôs answers were correct.&lt;&#x2F;p&gt;
&lt;p&gt;Apparently, people conform for two main reasons: because they want to fit in with the group (normative influence) and because they believe the group is better informed than they are (informational influence).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Conformity can be influenced both by a need to fit in and a belief that other people are smarter or better informed.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div &gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;TYIh4MkcfJA&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;factors-that-influence-conformity&quot;&gt;Factors that influence conformity&lt;&#x2F;h2&gt;
&lt;p&gt;Asch went on to conduct further experiments in order to determine which factors influenced, and how and when people conform. He found that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Conformity tends to increase when more people are present.&lt;&#x2F;li&gt;
&lt;li&gt;Conformity also increases when the task becomes more difficult.&lt;&#x2F;li&gt;
&lt;li&gt;Conformity increases when other members of the group are of a higher social status.&lt;&#x2F;li&gt;
&lt;li&gt;Conformity tends to decrease, however, when people are able to respond privately (i.e., when the group can‚Äôt know the naive participants‚Äô answers).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Solomon_Asch&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;www.verywellmind.com&#x2F;solomon-asch-biography&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;www.verywellmind.com&#x2F;the-asch-conformity-experiments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Open-Source Software</title>
		<published>2021-05-03T00:00:00+00:00</published>
		<updated>2021-05-03T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/open-source-software/" type="text/html"/>
		<id>https://chemaclass.es/blog/open-source-software/</id>
		<content type="html">&lt;h1 id=&quot;the-power-of-contributing-to-oss&quot;&gt;The power of contributing to OSS üñ•&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;what-is-open-source-software-oss-thinking&quot;&gt;What is Open-Source Software (OSS)? ü§î&lt;&#x2F;h2&gt;
&lt;p&gt;OSS shares similarities with free software, but it‚Äôs not the same. Free software is a form of OSS, but that doesn‚Äôt necessarily mean that it has to be free. For example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sebastianbergmann&#x2F;phpunit&#x2F;blob&#x2F;master&#x2F;LICENSE&quot;&gt;PHPUnit&lt;&#x2F;a&gt; is an example of OSS which is free.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spryker&#x2F;spryker-core&#x2F;blob&#x2F;master&#x2F;LICENSE&quot;&gt;Spryker&lt;&#x2F;a&gt; is an example of OSS which is not free.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;OSS is basically software that is public, open to the world.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;benefits-for-a-company&quot;&gt;Benefits ‚Äî for a company üõï&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Adoption: the easier the access, the easier the adoption.&lt;&#x2F;li&gt;
&lt;li&gt;Training and tutorials help the system to grow.&lt;&#x2F;li&gt;
&lt;li&gt;Tech: often on the cutting edge of technology.
Tech moves fast. They will get obsolete if they don‚Äôt.&lt;&#x2F;li&gt;
&lt;li&gt;Community: the people around want to improve as it grows.
Public channels enable easy access and community building.&lt;&#x2F;li&gt;
&lt;li&gt;Trust: the software is public and accessible.
Everyone can check the quality of the software anytime.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;benefits-for-you-as-a-single-contributor-nerd&quot;&gt;Benefits ‚Äî for you, as a single contributor ü§ì&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Flexibility: decide on what you want to work on.&lt;&#x2F;li&gt;
&lt;li&gt;Self-confidence: the experience improves your skills.&lt;&#x2F;li&gt;
&lt;li&gt;Training: without the pressure of a PROD environment.&lt;&#x2F;li&gt;
&lt;li&gt;Tech: play with the latest features of your tech.
Try upcoming versions of your coding lang, or even try new ones!&lt;&#x2F;li&gt;
&lt;li&gt;Soft skills: improve your communication skills.
Good communication in the project is important.
Especially when you face disagreements.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;TL;DR: It can be a ‚Äúconstant kata‚Äù if you want to.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;github-to-the-rescue-smiley&quot;&gt;Github to the rescue üòÉ&lt;&#x2F;h2&gt;
&lt;p&gt;Nowadays, it‚Äôs really trivial to start contributing to OSS:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can start your own project. A pet project fits here perfectly!&lt;&#x2F;li&gt;
&lt;li&gt;You can contribute to an existing OSS project.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pet-projects-elephant&quot;&gt;Pet projects üêò&lt;&#x2F;h2&gt;
&lt;p&gt;A pet project is a playground to create software and train your professional skills. Creating pet projects in your public Github profile has all the benefits of contributing to OSS, plus you‚Äôre your own boss:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You dictate the roadmap.&lt;&#x2F;li&gt;
&lt;li&gt;You decide what to do and how.&lt;&#x2F;li&gt;
&lt;li&gt;You‚Äôre your own boss.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The project is there for you. &lt;br&gt;
You are responsible to play, explore and pass your limits.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;some-chema-s-pet-projects&quot;&gt;Some Chema‚Äôs Pet Projects ü¶£&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;active&quot;&gt;Active&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Chemaclass&#x2F;php-best-practices&quot;&gt;php-best-practices&lt;&#x2F;a&gt;: what I consider best practices for web-dev.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Chemaclass&#x2F;php-scaffolding&quot;&gt;php-scaffolding&lt;&#x2F;a&gt;: a basic PHP scaffolding with Docker.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Chemaclass&#x2F;typed-arrays&quot;&gt;typed-arrays&lt;&#x2F;a&gt;: generics replacement for PHP.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;inactive&quot;&gt;Inactive&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;stock-ticker: get a notification with the news from your favorites Tickers.&lt;&#x2F;li&gt;
&lt;li&gt;jira-status-notifier: Notify when the JIRA tickets don‚Äôt move along.&lt;&#x2F;li&gt;
&lt;li&gt;edifact-parser: a parser for a UN&#x2F;EDIFACT file format in PHP.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;abandoned&quot;&gt;Abandoned&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;knob-mvc: a framework to create WordPress templates (2015&#x2F;2017).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;some-of-chema-s-oss-org-contributions-new-moon-with-face&quot;&gt;Some of Chema‚Äôs OSS org contributions üåö&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;active-1&quot;&gt;Active&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;phel-lang&#x2F;phel-lang&quot;&gt;phel-lang&lt;&#x2F;a&gt;: Phel is a functional programming language that compiles to PHP. It is a dialect of Lisp inspired by Clojure and Janet.
I already wrote a post about phel-lang: &lt;a href=&quot;https:&#x2F;&#x2F;chemaclass.medium.com&#x2F;phel-the-lisp-that-compiles-to-php-544980605ebe&quot;&gt;Phel: A Lisp that compiles to PHP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gacela-project&#x2F;gacela&quot;&gt;gacela-project&lt;&#x2F;a&gt;: Gacela is a PHP framework that helps you to improve the design of your application by splitting the logic into different modules.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;abandoned-1&quot;&gt;Abandoned&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;nm_template: The base template for NuevaMetal (2013‚Äì2016).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;knowledge-sharing-writing-hand-skin-tone-3&quot;&gt;Knowledge sharing ‚úçüèº&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Pull Requests vs Pair Programming&lt;&#x2F;li&gt;
&lt;li&gt;The process itself is the goal&lt;&#x2F;li&gt;
&lt;li&gt;The art of refactoring; When, How, and Why&lt;&#x2F;li&gt;
&lt;li&gt;The art of testing: Where design meets quality&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;... and many more on &lt;a href=&quot;https:&#x2F;&#x2F;chemaclass.es&#x2F;blog&#x2F;&quot;&gt;https:&#x2F;&#x2F;chemaclass.es&#x2F;blog&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-beauty-of-this-older-mortar-board&quot;&gt;The beauty of this üßë‚Äçüéì&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Seeing the corrections that you constantly keep doing&lt;&#x2F;li&gt;
&lt;li&gt;Seeing how your own code gets old with time&lt;&#x2F;li&gt;
&lt;li&gt;Seeing the many mistakes that you have done&lt;&#x2F;li&gt;
&lt;li&gt;Seeing how you are getting better at coding over time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Developing a sixth sense to smell patterns which you have already done and their positive &amp;amp; negative experiences.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Showing your skills and helping the community around you.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Open-Source Software offers you one of the best opportunities to start building your career path towards continuous improvement.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div &gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;GE5wR_SC_P4&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jesusvalerareales.medium.com&#x2F;getting-started-with-open-source-software-e6c177b68b39&quot;&gt;Getting started with Open Source Software&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pull Requests vs Pair Programming</title>
		<published>2021-04-01T00:00:00+00:00</published>
		<updated>2021-04-01T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/pull-request-vs-pair-prog/" type="text/html"/>
		<id>https://chemaclass.es/blog/pull-request-vs-pair-prog/</id>
		<content type="html">&lt;p&gt;Why choosing when you can have both?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pull-requests&quot;&gt;Pull Requests&lt;&#x2F;h1&gt;
&lt;p&gt;A Pull Request (PR) is basically a way of showing your suggested code changes such that they are easily comparable with the existing source code. This is part of a workflow that helps developers to share knowledge about the changes that are being done within the system.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Pull Request is the moment where you ask your peers to review and check out your code changes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Usually, it‚Äôs also used:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;For discussions about code style.&lt;&#x2F;li&gt;
&lt;li&gt;To spot potential bugs.&lt;&#x2F;li&gt;
&lt;li&gt;For architectural or design discussions once the solution is done.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;pull-requests-aren-t-the-best-tool-for-everything&quot;&gt;Pull Requests aren‚Äôt the best tool for everything&lt;&#x2F;h2&gt;
&lt;p&gt;The main problem with these topics above is that PR‚Äôs are usually ready when the feature&#x2F;bug is already being worked on and in the last stage of its development process. It‚Äôs an ‚Äúalready change proposal to be merged into the current system‚Äù, don‚Äôt forget that.&lt;&#x2F;p&gt;
&lt;p&gt;The concept of ‚ÄúDraft PR‚Äù exists to make explicit that a PR is not ready to be merged, so it‚Äôs still a ‚Äúwork in progress thing‚Äù, but that‚Äôs another topic.&lt;&#x2F;p&gt;
&lt;p&gt;Pull Requests are, indeed, one of the best tools that we have in our industry to share knowledge about the changes that we are doing in the system, but sometimes they might be misused, as for example:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Discussions about code style&lt;&#x2F;strong&gt;. Code style shouldn‚Äôt be discussed in a PR. There should be already a CI running a code style checker, that‚Äôs all. If you want to talk about code style, request a change in your code style checker, but not in a random PR.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Spot bugs&lt;&#x2F;strong&gt;. Bugs and desired behavior should be covered by automated tests. The developer is the first responsible person for this topic.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Architectural or design discussions&lt;&#x2F;strong&gt;. Once a particular solution is developed and ready for review, it is usually really hard to ‚Äúrollback‚Äù that idea and rewrite it again. Because ‚Äúwhy would you do that? For some subjective opinion? It‚Äôs done already. And it seems to work just fine.‚Äù&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Having an extra person looking at the changes that we have done for ‚Äúdesigning decisions‚Äù might be beneficial, but we could have addressed ‚Äúpotential disagreements‚Äù in a sooner stage.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-should-the-purpose-of-a-pull-request-be&quot;&gt;What should the purpose of a Pull Request be?&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Sharing knowledge about the proposed changes with the team.&lt;&#x2F;li&gt;
&lt;li&gt;Ensuring the team aligns and agrees across the multiples changes that are getting submitted every day in order to keep a healthy direction for the project. Yes, this might include double-checking the outcome design, but‚Ä¶ What if that is now too late? How could we solve all those issues?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;pair-programming&quot;&gt;Pair Programming&lt;&#x2F;h1&gt;
&lt;p&gt;The concept of ‚ÄúPair Programming‚Äù can be understood from different points of view. Pair thinking and pair programming, driver-navigator roles concepts, or pure live coding from one side. Actually, this is way easier than it looks like at first instance:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Either you watch and help the other person to write code,&lt;&#x2F;li&gt;
&lt;li&gt;Or you type while getting another pair of eyes watching and helping you.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Pair Programming helps the team to work together.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Pair programming is the joy of working with an extra brain and another pair of eyes, where the key is to &lt;strong&gt;build a context&lt;&#x2F;strong&gt; where you two &lt;strong&gt;share the same goal&lt;&#x2F;strong&gt; in order to find the &lt;strong&gt;best possible solution&lt;&#x2F;strong&gt;. All of this while learning from each other every single second.
Pair Programming is not about developing the best solution at the very beginning. It‚Äôs about making it work, sharing ideas, and finding a better solution together. After that, you can refactor and clean the code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pair-programming-is-a-continuous-code-review&quot;&gt;Pair Programming is a continuous code review&lt;&#x2F;h2&gt;
&lt;p&gt;Pull Requests are an asynchronous way to share code changes, while Pair Programming is totally &lt;strong&gt;synchronous&lt;&#x2F;strong&gt; because it happens at the same time.&lt;&#x2F;p&gt;
&lt;p&gt;That said, Pull Requests and Pair Programming aren‚Äôt mutually exclusive, they can coexist. They are tools, and we should wisely choose them in order to achieve our objectives.&lt;&#x2F;p&gt;
&lt;p&gt;The most common fear that I saw while encouraging to do Pair Programming is that some people are shy and they don‚Äôt like to have other eyes around them while they are coding because of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fear that they don‚Äôt know what to code or where to start.&lt;&#x2F;li&gt;
&lt;li&gt;Fear that others will laugh at their solutions.&lt;&#x2F;li&gt;
&lt;li&gt;Fear to don‚Äôt succeed in public.&lt;&#x2F;li&gt;
&lt;li&gt;Fear to not be able to develop the expected solution for multiple reasons: misunderstanding the task or lack of knowledge.&lt;&#x2F;li&gt;
&lt;li&gt;Fear to change your mind in front of others.&lt;&#x2F;li&gt;
&lt;li&gt;Fear to discuss and make decisions loud.&lt;&#x2F;li&gt;
&lt;li&gt;Fear of disagreeing with others.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;after-several-years-of-experience-on-this-topic&quot;&gt;After several years of experience on this topic&lt;&#x2F;h2&gt;
&lt;p&gt;The pattern which rejects Pair Programing is basically ‚Äúfear‚Äù, and being out of your comfort zone. And this is due to the misunderstanding of the roots of the actual Pair Programming concept.&lt;&#x2F;p&gt;
&lt;p&gt;Pair Programming is not ‚Äúto show off in front of your colleagues‚Äù or ‚Äúto be screwed by your peers‚Äù, but to be transparent (showing your skills as they really are) and improve as a team lifting up each other.&lt;&#x2F;p&gt;
&lt;p&gt;Programming is an iterative process that needs a continuous refactoring of our way of thinking in order to achieve better solutions, day by day. Therefore, programming with another person next to you (with a different way of thinking) will help the team to get the best from each other while discarding the waste or bad habits if necessary.&lt;&#x2F;p&gt;
&lt;p&gt;Pair Programming doesn‚Äôt need to be always set for everything. As a tool, it‚Äôs flexible, and we can choose how, when and for what reason.&lt;&#x2F;p&gt;
&lt;p&gt;A personal rule of thumb, before starting tasks that might involve touching multiple modules or complex business rules, think about a quick Pair Thinking&#x2F;Programming with another more experienced colleague in that field.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everything depends on a particular context and people: the developers, the pairs, the tasks, the mood.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;still-uncomfortable-with-pair-programming&quot;&gt;Still uncomfortable with Pair Programming?&lt;&#x2F;h2&gt;
&lt;p&gt;If you still feel uncomfortable having another person next to you while you write code, it might be because you aren‚Äôt particularly happy with your own code, or the process that you follow in order to achieve some result. My favorite way to work on this is by exercising on your own and working on improving your skills as a software developer.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create and play around with your own pet projects.&lt;&#x2F;li&gt;
&lt;li&gt;Work on code katas on your own and with others.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Practice makes the master.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Don‚Äôt get me wrong, Pull Requests are great. Keep doing them.&lt;&#x2F;li&gt;
&lt;li&gt;Team collaboration is essential. Pair Programming aims for this.&lt;&#x2F;li&gt;
&lt;li&gt;Pair Programming encourages the team to proactively work together.&lt;&#x2F;li&gt;
&lt;li&gt;Don‚Äôt be afraid of coding while having eyes around you. Ask questions when something is unclear. Ask for help when you don‚Äôt know how to solve something.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;It‚Äôs totally ok not knowing everything. The most important thing is to know how to work together.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Embrace the change</title>
		<published>2021-03-01T00:00:00+00:00</published>
		<updated>2021-03-01T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/embrace-the-change/" type="text/html"/>
		<id>https://chemaclass.es/blog/embrace-the-change/</id>
		<content type="html">&lt;h2 id=&quot;who-moved-my-cheese-cheese-wedge&quot;&gt;Who moved my cheese?üßÄ&lt;&#x2F;h2&gt;
&lt;p&gt;Published in 1998 and I just read it at the beginning of 2021. Better late than never. Actually, thanks to my brother Jes√∫s, who recommended it to me.&lt;&#x2F;p&gt;
&lt;p&gt;The book &lt;em&gt;Who moved my cheese?&lt;&#x2F;em&gt; presents a tale inside the main story that consists of four characters: two mice, &lt;strong&gt;Sniff&lt;&#x2F;strong&gt; and &lt;strong&gt;Scurry&lt;&#x2F;strong&gt;, and two little persons, &lt;strong&gt;Hem&lt;&#x2F;strong&gt; and &lt;strong&gt;Haw&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;They live in a Maze (that represents one‚Äôs environment) and in order to survive they need to go out of their comfort zone and look for cheese (which represents happiness and success).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The tale starts when both groups end up at ‚ÄúCheese Station C‚Äù, full of cheese. The humans established routines while the mouses kept their instincts active.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;One day the mouses arrive at the ‚ÄúCheese Station C‚Äù and find no cheese left. So they go out to find more cheese somewhere else. On the contrary, when Hem and Haw see that there is no cheese left, they start complaining. Hem, angry and annoyed, demands ‚ÄúWho moved my cheese?!‚Äù. Both humans counted on the cheese supply would be endless constant, so they weren‚Äôt prepared for that unexpected. The main difference here is how Haw and Hem react to this situation.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Hem denies moving away from the ‚ÄúCheese Station C‚Äù, so he keeps going there every day expecting to find cheese without success, being weaker, and with continuous fear of doing something different. Haw, on the other hand, decides to laugh at the situation, turns down his fear, and goes out looking for more cheese.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;... I will leave the rest of the tale to you.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The tale is a beautiful metaphor of the different attitudes that people adopt as part of their identity in life when they have to confront any change.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Noticing small changes early helps you adapt to the bigger changes that are to come.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This book is full of lessons that apply to everyone no matter who they are or when they read it. I fully recommend it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;my-favorite-lessons-of-the-book&quot;&gt;My favorite lessons of the¬†book&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Change happens.
They keep moving the cheese.&lt;&#x2F;li&gt;
&lt;li&gt;Anticipate change.
Get ready for the cheese to move.&lt;&#x2F;li&gt;
&lt;li&gt;Monitor change.
Smell the cheese often so you know when it&#x27;s getting old.&lt;&#x2F;li&gt;
&lt;li&gt;Adapt to change quickly.
The quicker you let go of old cheese, the sooner you can enjoy new cheese.&lt;&#x2F;li&gt;
&lt;li&gt;Change.
Move with the cheese.&lt;&#x2F;li&gt;
&lt;li&gt;Enjoy change.
Enjoy the taste of new cheese&lt;&#x2F;li&gt;
&lt;li&gt;Be ready to change quickly and enjoy it again.
They keep moving the cheese.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Everyone knows that not all change is good or even necessary. But in a world that is constantly changing, it is to our advantage to learn how to adapt and enjoy something better. It is not what is in the story of &amp;quot;Who moved my cheese?&amp;quot; but how you interpret it and apply it to your own situation that gives it the¬†value.&amp;quot; - Ken Blanchard.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div &gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;OvYCLxqkfvY&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Find the book in &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.de&#x2F;-&#x2F;en&#x2F;Dr-Spencer-Johnson&#x2F;dp&#x2F;0091816971&#x2F;&quot;&gt;Amazon.de&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ÄúLife moves on and so should we‚Äù ‚Äî Spencer Johnson&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Phel: the Lisp that compiles to PHP</title>
		<published>2021-02-01T00:00:00+00:00</published>
		<updated>2021-02-01T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/phel-first-release/" type="text/html"/>
		<id>https://chemaclass.es/blog/phel-first-release/</id>
		<content type="html">&lt;h5 id=&quot;the-new-functional-language-fully-interoperable-with-php-rocket&quot;&gt;The new functional language. Fully interoperable with PHP üöÄ&lt;&#x2F;h5&gt;
&lt;h1 id=&quot;the-phel-language&quot;&gt;The Phel Language&lt;&#x2F;h1&gt;
&lt;p&gt;Phel is a Functional Programming (&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Functional_programming&quot;&gt;FP&lt;&#x2F;a&gt;) language that compiles to PHP. It is a dialect of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lisp_(programming_language)&quot;&gt;Lisp&lt;&#x2F;a&gt; inspired by Clojure and Janet.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;features&quot;&gt;Features&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Built on PHP‚Äôs ecosystem&lt;&#x2F;li&gt;
&lt;li&gt;Good error reporting&lt;&#x2F;li&gt;
&lt;li&gt;Different Datastructures (Arrays, Tables, and Tuples)&lt;&#x2F;li&gt;
&lt;li&gt;Macros&lt;&#x2F;li&gt;
&lt;li&gt;Recursive functions&lt;&#x2F;li&gt;
&lt;li&gt;Powerful but simple Syntax&lt;&#x2F;li&gt;
&lt;li&gt;REPL&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-phel&quot;&gt;Why Phel?&lt;&#x2F;h2&gt;
&lt;p&gt;Phel is a creation of Jens Haase, and as he mentions on the website, ‚Äúit is the result of many &lt;a href=&quot;https:&#x2F;&#x2F;phel-lang.org&#x2F;blog&#x2F;functional-programming-in-php&quot;&gt;failed attempts to do functional programming in PHP&lt;&#x2F;a&gt;‚Äù. He was looking for something with these characteristics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A LISP-inspired&lt;&#x2F;li&gt;
&lt;li&gt;Functional Programming language&lt;&#x2F;li&gt;
&lt;li&gt;That runs on cheap hosting providers&lt;&#x2F;li&gt;
&lt;li&gt;And is easy to write and debug&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;From my point, it was ending May 2020 when I finished the book ‚Äú&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.de&#x2F;-&#x2F;en&#x2F;Bruce-Tate&#x2F;dp&#x2F;193435659X&#x2F;&quot;&gt;Seven Languages in Seven Weeks: A Pragmatic Guide to Learning Programming Languages&lt;&#x2F;a&gt;‚Äù, in which I learned a bit of Prolog, Erlang, Clojure, Haskell‚Ä¶ I even created a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Chemaclass&#x2F;7LangIn7Weeks&quot;&gt;repository in Github&lt;&#x2F;a&gt; to store my progress over the weeks with these learnings.&lt;&#x2F;p&gt;
&lt;p&gt;Suddenly, one day beginning of June 2020, I saw a post in Reddit&#x27;s PHP official channel, with a message of someone mentioning this ‚Äú&lt;strong&gt;Phel&lt;&#x2F;strong&gt;‚Äù project, claiming to be a ‚Äú&lt;strong&gt;functional programming language written in PHP&lt;&#x2F;strong&gt;‚Äù! (or something like that).&lt;&#x2F;p&gt;
&lt;p&gt;I work with PHP for around 8 years so far, and I always try to combine OOP with FP as much as possible (because I believe both paradigms are better combined; they are not necessarily exclusive), and a new dialect of Lisp fully written in native &lt;strong&gt;PHP 7.4&lt;&#x2F;strong&gt; sounded really exciting. I decided to take a look at it. I wanted to see the code.&lt;&#x2F;p&gt;
&lt;p&gt;The fresh readings from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;matthiasnoback&quot;&gt;Mathias NoBack&lt;&#x2F;a&gt; books such as &lt;a href=&quot;https:&#x2F;&#x2F;www.manning.com&#x2F;books&#x2F;object-design-style-guide&quot;&gt;Object Design Style Guide&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.apress.com&#x2F;us&#x2F;book&#x2F;9781484241189&quot;&gt;Principles of Package Design&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;web-application-architecture&#x2F;&quot;&gt;Advanced Web Application Architecture&lt;&#x2F;a&gt;, gave me the courage to try out what I learned and put it for real in a project. This was (and still is) a beautiful challenge, which helps me to test myself and grow professionally at the same time.&lt;&#x2F;p&gt;
&lt;p&gt;My first commit was done on 6 June 2020, and since then I work on this project a bit (almost) every day in my free time. It helps me to learn more about FP, languages internal design, and best practices on testing and software design architecture in general.&lt;&#x2F;p&gt;
&lt;p&gt;I started applying minor changes until I ended refactoring the whole compiler structure (among other things) in order to make the modules easier to read and understand. Psalm, strict types, good test coverage, unifying code style‚Ä¶ These were some of my favorite topics.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-of-phel-code&quot;&gt;Example of Phel code&lt;&#x2F;h2&gt;
&lt;p&gt;The following example gives a short impression of how Phel looks like:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;# Define a namespace
(ns my\example)
# Define a variable with name &amp;quot;my-name&amp;quot; and value &amp;quot;world&amp;quot;
(def my-name &amp;quot;world&amp;quot;)
# Define a func with name &amp;quot;print-name&amp;quot; and one argument &amp;quot;your-name&amp;quot;
(defn print-name [your-name]
  (print &amp;quot;hello&amp;quot; your-name))
# Call the function
(print-name my-name)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;current-status-of-phel&quot;&gt;Current status of Phel&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;We have an open &lt;a href=&quot;https:&#x2F;&#x2F;gitter.im&#x2F;phel-lang&#x2F;community&quot;&gt;Gitter Community&lt;&#x2F;a&gt; where we help each other&lt;&#x2F;li&gt;
&lt;li&gt;We prepared an easy &lt;a href=&quot;https:&#x2F;&#x2F;phel-lang.org&#x2F;documentation&#x2F;getting-started&#x2F;&quot;&gt;Getting Started Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;We prepared an easy Github Repository with a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;phel-lang&#x2F;phel-scaffolding&quot;&gt;Phel Scaffolding Template&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;We just released the first official version: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;phel-lang&#x2F;phel-lang&#x2F;tags&quot;&gt;0.1.0&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Check out the official website with all documentation of the Phel Language:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;https:&#x2F;&#x2F;phel-lang.org&#x2F;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;also-recommended&quot;&gt;Also recommended&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jesusvalerareales.medium.com&#x2F;functional-programming-with-phel-5f32145eddb7&quot;&gt;Functional Programming with Phel&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>To mock or not to mock</title>
		<published>2021-01-11T00:00:00+00:00</published>
		<updated>2021-01-11T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/to-mock-or-not-to-mock/" type="text/html"/>
		<id>https://chemaclass.es/blog/to-mock-or-not-to-mock/</id>
		<content type="html">&lt;h4 id=&quot;how-to-escape-the-mocking-hell&quot;&gt;How to escape the mocking hell&lt;&#x2F;h4&gt;
&lt;p&gt;What is actually happening when we create a mock? Which types of mocks are there? Is mocking good or bad? Well, as always, everything depends on the context. And here we will consider some of the main situations about when to mock and when not to mock, but especially why.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-happens-when-you-mock-something&quot;&gt;What happens when you mock something?&lt;&#x2F;h2&gt;
&lt;p&gt;First, we should define what is a mock:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a unit test, mock objects can simulate the behavior of complex, real objects and are therefore useful when it is impractical or impossible to incorporate a real object into a unit test.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Mocking makes sense in a &lt;em&gt;unit testing&lt;&#x2F;em&gt; context. An integration test should go through the real implementation checking the integration between multiple units, which are even allowed to talk to the DB or File IO: infrastructure code. Therefore we should agree that &lt;em&gt;a unit test is a fast and deterministic test that doesn‚Äôt rely on external dependencies and doesn‚Äôt require any special context to run&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Mock objects meet the &lt;em&gt;interface&lt;&#x2F;em&gt; requirements. In consequence, they allow us to write and unit-test functionality without calling complex underlying or collaborating classes.&lt;&#x2F;p&gt;
&lt;p&gt;A mock is a test double that stands in for real implementation code during the unit testing process. It is also capable of producing assertions about how it was manipulated by the test subject during the test run.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I strongly recommend you to read this post if you want to get into the details of why &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;javascript-scene&#x2F;mocking-is-a-code-smell-944a70c90a6a&quot;&gt;Mocking is a code smell&lt;&#x2F;a&gt; (Topics like these: What is a mock? What is a unit test? What is test coverage? What is tight coupling? What causes tight coupling? What does composition have to do with mocking? How do we remove coupling? and more!)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-problem-with-mocking&quot;&gt;The problem with mocking&lt;&#x2F;h2&gt;
&lt;p&gt;When you mock you are overriding the logic of the mocked class. The real logic is getting hidden behind the scenes and there is actually where bugs love to live. Consider that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The mock may have attributes, methods, or arguments that the real object doesn‚Äôt.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The mock‚Äôs &lt;em&gt;return values may differ from the real objects‚Äô return values&lt;&#x2F;em&gt;. For example, it may return a different type of object that has different attributes.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The mock‚Äôs &lt;em&gt;side effects and behavior may differ from the real objects‚Äô ones&lt;&#x2F;em&gt;. For example, maybe the mock fails to raise an exception when the real object would raise it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;alternatives-to-mocking&quot;&gt;Alternatives to mocking&lt;&#x2F;h2&gt;
&lt;p&gt;‚ÄúAre you saying that mocking is bad and we shouldn‚Äôt mock?!‚Äù No.&lt;&#x2F;p&gt;
&lt;p&gt;It depends on what you are ‚Äúoverriding‚Äù.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Is your business domain logic what you are mocking? Then it‚Äôs wrong.&lt;&#x2F;li&gt;
&lt;li&gt;Is the connection to the DB what you are mocking? Then it‚Äôs right.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;It depends on the context of the logic and where that logic belongs.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Is it part of your business domain logic? Then you shouldn‚Äôt mock it but instantiate it.&lt;&#x2F;p&gt;
&lt;p&gt;Is it part of any infrastructure dependency like DB connection, IO file system, Network, or any external service that has nothing to do directly with your business domain? Then &lt;em&gt;mock it using abstractions&#x2F;interfaces&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The interface should be the &lt;em&gt;contract between your business domain logic and its external infrastructure dependencies&lt;&#x2F;em&gt;. Imagine how easy it would be to unit test your domain logic by instantiating it and calling their methods with different arguments expecting different inputs under your entire control. &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;swlh&#x2F;unit-testing-effectively-4d1cabc77722&quot;&gt;Here is an example of how to unit test written code&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;some-tricks&quot;&gt;Some tricks&lt;&#x2F;h2&gt;
&lt;p&gt;When you are writing a unit test:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Try to instantiate your classes first.&lt;&#x2F;li&gt;
&lt;li&gt;Avoid mocking concrete classes. I wrote an article exclusively about this exclusively: encouraging &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;swlh&#x2F;final-classes-in-php-9174e3e2747e&quot;&gt;final classes&lt;&#x2F;a&gt; and interfaces.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Mock interfaces. Instantiate concrete classes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div &gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;RbSqXFUfRMU&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;‚ÄúExcessive use of mocks leads to legacy code.‚Äù ‚Äî Philippe Boargau&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-can-we-avoid-excessive-mocking&quot;&gt;How can we avoid excessive mocking?&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Favor immutable state over a mutable state.&lt;&#x2F;li&gt;
&lt;li&gt;Make dependencies explicit.&lt;&#x2F;li&gt;
&lt;li&gt;Program to an interface, not to an implementation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Sharing your git patches</title>
		<published>2020-12-01T00:00:00+00:00</published>
		<updated>2020-12-01T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/sharing-git-patches/" type="text/html"/>
		<id>https://chemaclass.es/blog/sharing-git-patches/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Another way of sharing quick suggestions with your team&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;imagine-this-situation&quot;&gt;Imagine this situation&lt;&#x2F;h3&gt;
&lt;p&gt;You are reviewing a Pull Request (PR), and you see some minor improvements or suggestions that you would like to share with the author. You might write some comments, and usually, that would be sufficient.&lt;&#x2F;p&gt;
&lt;p&gt;But imagine that in order to transmit your ‚Äúwhole idea‚Äù you would need to change some files because just communicating the full picture will end up in a huge comment which might be not as clear as it could be.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-possibilities-are-there-apart-from-just-comments-in-a-pr&quot;&gt;What possibilities are there apart from just comments in a PR?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, there are multiple options. The key is to be aware of them and use them wisely depending on the priority of the task and the changes themselves:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;As already mentioned, writing a comment as feedback is a good idea by default, but not the only one.&lt;&#x2F;li&gt;
&lt;li&gt;We can always do some pair-thinking, talk at any time. Communication is always good in order to clarify the possible uncertainty.&lt;&#x2F;li&gt;
&lt;li&gt;Sharing your git patches is another good option.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;git-diff-to-the-rescue&quot;&gt;Git diff to the rescue!&lt;&#x2F;h1&gt;
&lt;p&gt;What if you (as a reviewer) could share your idea without any single commit or comment in the PR, but sharing your changes directly with the author?&lt;&#x2F;p&gt;
&lt;p&gt;Well, that‚Äôs actually possible and really easy. As you already know, the git diff command gives you the differences between any two branches.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;git diff origin develop &amp;gt; ..&#x2F;my-origin-develop.patch&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;What we are doing here is redirecting the output of the diff command into a file (aka: patch), so we can share that output with any other peer-team.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-now&quot;&gt;What now?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, having that patch file, it‚Äôs pretty easy to apply those changes in your local machine without doing any commit:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;git apply ..&#x2F;my-origin-develop.patch&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Applying this patch will simply change your local system in the same way the patch was created.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-by-steps&quot;&gt;‚ÄúHow to‚Äù by steps&lt;&#x2F;h2&gt;
&lt;p&gt;Let‚Äôs divide the responsibilities into two: the creator of the patch and its user:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-patch-creator-the-person-who-will-create-the-patch&quot;&gt;The patch creator: the person who will create the patch&lt;&#x2F;h3&gt;
&lt;pre&gt;&lt;code&gt;# Checkout that branch
$ ~&#x2F;myProject git:(the-branch) ‚ûú git pull origin the-branch
# Do your suggestions and changes in the targeted branch
# Generate the patch file using the diff command
$ ~&#x2F;myProject git:(the-branch) ‚ûú git diff &amp;gt; ..&#x2F;your-diff.patch
# Share the patch file with the author of the PR
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;the-patch-user-the-person-who-will-see-the-patch&quot;&gt;The patch user: the person who will see the patch&lt;&#x2F;h3&gt;
&lt;pre&gt;&lt;code&gt;# Ensure you are in that branch
$ ~&#x2F;myProject git:(the-branch) ‚ûú git pull origin the-branch
# Apply the patch file
$ ~&#x2F;myProject git:(the-branch) ‚ûú git apply ..&#x2F;your-diff.patch
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;references&quot;&gt;References&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;git-apply&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Never use array_merge in a loop</title>
		<published>2020-11-10T00:00:00+00:00</published>
		<updated>2020-11-10T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/array-merge-in-loop/" type="text/html"/>
		<id>https://chemaclass.es/blog/array-merge-in-loop/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;The spread operator to the rescue.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;flattening-a-one-level-array&quot;&gt;Flattening a one-level array&lt;&#x2F;h1&gt;
&lt;p&gt;I have seen people using the array_merge function in a loop like:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$lists = [
  [1, 2],
  [3, 4],
  [5, 6],
];
$merged = [];
foreach($lists as $list) {
    $merged = array_merge($merged, $list);
}
&#x2F;&#x2F; $merged === [1, 2, 3, 4, 5, 6];
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a very bad practice because it‚Äôs a (memory) performance killer!
Instead, you should use the spread operator (in PHP since 5.6!):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$lists = [
  [1, 2],
  [3, 4],
  [5, 6],
];
$merged = array_merge(...$lists);
&#x2F;&#x2F; === [1, 2, 3, 4, 5, 6];
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;unpacking-an-assoc-array&quot;&gt;Unpacking an assoc-array&lt;&#x2F;h2&gt;
&lt;p&gt;What if you had an assoc-array instead like this one?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$lists = [
  &#x27;key-1&#x27; =&amp;gt; [1, 2],
  &#x27;key-2&#x27; =&amp;gt; [3, 4],
  &#x27;key-3&#x27; =&amp;gt; [5, 6],
];
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In that case, you will need to unpack its values:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$merged = array_merge(...array_values($lists));
&#x2F;&#x2F; === [1, 2, 3, 4, 5, 6];
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In Functional Programming, this is known as flatting a list.
No loops &amp;amp; no more performance problem.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;flatting-a-multilevel-array&quot;&gt;Flatting a multilevel array&lt;&#x2F;h1&gt;
&lt;p&gt;What if you wanted to flat a multilevel array like this one?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$lists = [[1], 2, [[3, 4], 5], [[[]]], [[[6]]], 7, 8, []];
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or like this one, even with key-values?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$lists = [
    &#x27;key-1&#x27; =&amp;gt; [
        1,
        [2],
        &#x27;key-2&#x27; =&amp;gt; [
            3,
            [
                &#x27;key-3&#x27; =&amp;gt; [4, 5],
            ],
        ],
    ],
    6,
    &#x27;key-4&#x27; =&amp;gt; [7, 8],
];
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In these cases, you might want to use the internal standard library:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$merged = iterator_to_array(
    new RecursiveIteratorIterator(
        new RecursiveArrayIterator($lists)
    ),
    $use_keys = false
);
&#x2F;&#x2F; $merged === [1, 2, 3, 4, 5, 6, 7, 8];
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;Usually, being aware of how to flat a ‚Äú2 level‚Äù array might be sufficient:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$flattenList = array_merge(...array_values($lists));
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Otherwise, the internal standard library will help you deal with it.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Typed arrays in PHP</title>
		<published>2020-10-13T00:00:00+00:00</published>
		<updated>2020-10-13T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/typed-arrays-php/" type="text/html"/>
		<id>https://chemaclass.es/blog/typed-arrays-php/</id>
		<content type="html">&lt;h2 id=&quot;an-alternative-to-the-missing-feature-in-php-generics&quot;&gt;An alternative to the missing feature in PHP: Generics&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-perfect-combination&quot;&gt;The perfect combination&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Argument unpacking: Instead of passing the argument itself to the function, the elements it contains will be passed (as individual arguments).&lt;&#x2F;li&gt;
&lt;li&gt;Function variable argument list: The arguments will be passed into the given variable as an array.&lt;&#x2F;li&gt;
&lt;li&gt;Variadics function: Types can be checked with a type-hint.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will use this snipped for our examples
Having a class, &lt;code&gt;Customer&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&#x2F;** 
 * @psalm-immutable 
 *&#x2F;
final class Customer
{
    &#x2F;&#x2F; Using PHP 8 constructor property promotion
    public function __construct(
        public string $name,
    ) {}
}
&#x2F;&#x2F; We create a list of 6 customers
$customers = array_map(
    fn(int $i): Customer =&amp;gt; new Customer(&amp;quot;name-{$i}&amp;quot;),
    range(1, 6)
);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whenever we want to manipulate a list of Customers, we can pass as an argument: &lt;code&gt;‚Ä¶$customers&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-we-use-to-do-it&quot;&gt;How we use to do it&lt;&#x2F;h2&gt;
&lt;p&gt;We define the array type using the PHPDoc param comment block above. But we cannot define the real type of the item. The code will still run without any problem passing any type on that argument &lt;code&gt;array $customers&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&#x2F;** 
 * @param Customer[] 
 *&#x2F;
function createInvoiceForCustomers(array $customers): void
{
    foreach ($customers as $customer) {
        &#x2F;&#x2F; ... some irrelevant logic for this example
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code below would work at &amp;quot;compile-time&amp;quot;. But it might fail at &amp;quot;runtime&amp;quot;.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;createInvoiceForCustomers($customers);
createInvoiceForCustomers([new Customer(&#x27;any name&#x27;)]);
createInvoiceForCustomers([new AnyOtherType()]);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An alternative (recommended!) might be to extract that logic and ask for the particular type in order to &amp;quot;check it&amp;quot; at runtime in that particular moment, failing if one of the items wasn&#x27;t really a Customer:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&#x2F;** 
 * @param Customer[] 
 *&#x2F;
function createInvoiceForCustomers(array $customers): void
{
    foreach ($customers as $customer) {
        createInvoice($customer);
    }
}
function createInvoice(Customer $customer): void
{
    &#x2F;&#x2F; ... some irrelevant logic for this example
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Everything here below would work at &amp;quot;compile-time&amp;quot;. It will for sure break during &amp;quot;runtime&amp;quot; if the &lt;code&gt;createInvoice(Customer $customer)&lt;&#x2F;code&gt; receives something different than a Customer.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;createInvoiceForCustomers($customers);
createInvoiceForCustomers([new Customer(&#x27;any name&#x27;)]);
createInvoiceForCustomers([new AnyOtherType()]); &#x2F;&#x2F; won&#x27;t work
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By doing that &lt;code&gt;createInvoice(Customer $customer)&lt;&#x2F;code&gt; we are ensuring the type of the argument, which is good! But, what about going one step further. Could we check the types of the elements when calling the function &lt;code&gt;createInvoiceForCustomers(array $customers)&lt;&#x2F;code&gt;, even making the IDE complain when the types are not right?&lt;&#x2F;p&gt;
&lt;p&gt;Well, that&#x27;s actually what Generics are for, but sadly, they are not yet in PHP. Not even in the upcoming PHP 8. Hopefully in a near future, but we cannot predict that for now.
Luckily, we have currently an alternative nowadays, but it&#x27;s not that popular. It has its own &amp;quot;pros&amp;quot; and &amp;quot;cons&amp;quot;, so let&#x27;s take a look at an example first:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;function createInvoiceForCustomers(Customer ...$customers): void
{
    foreach ($customers as $customer) {
        createInvoice($customer);
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Everything here below would work at &amp;quot;compile-time&amp;quot;. It will for sure break during &amp;quot;runtime&amp;quot; if the &lt;code&gt;createInvoice()&lt;&#x2F;code&gt; receives something different than a Customer.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;createInvoiceForCustomers(...$customers); &#x2F;&#x2F; OK
createInvoiceForCustomers(
    new Customer(&#x27;any name&#x27;), 
    new Customer(&#x27;any name&#x27;),
); &#x2F;&#x2F; OK
&#x2F;&#x2F; This is not even possible to write. The IDE will yeld at you. 
&#x2F;&#x2F; It&#x27;s expecting a `Customer`, but `AnyOtherType` is given:
createInvoiceForCustomers(new AnyOtherType());
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;pros&quot;&gt;PROS&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;We can easily type a list of any concrete type.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;cons&quot;&gt;CONS&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;We better define our functions with one or two arguments max. Otherwise, it would be too complicated to read.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;important-remarks&quot;&gt;Important remarks&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;It needs to be the last taken argument of a function.&lt;&#x2F;li&gt;
&lt;li&gt;It helps to minimize the number of arguments that we use in a function.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;&#x2F;h2&gt;
&lt;p&gt;Argument unpacking is a great feature that, in combination with variadic functions, can help us to simulate typed arrays. With great power comes great responsibility, and this is no exception.
We need to learn about our toolbox in order to use it wisely.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;References&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.php.net&#x2F;rfc&#x2F;argument_unpacking&quot;&gt;Argument unpacking&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;functions.arguments.php#functions.variable-arg-list&quot;&gt;Function variable argument list&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.php.net&#x2F;rfc&#x2F;variadics&quot;&gt;Variadics function&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The process itself is the goal</title>
		<published>2020-09-08T00:00:00+00:00</published>
		<updated>2020-09-08T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/the-process-itself-is-the-goal/" type="text/html"/>
		<id>https://chemaclass.es/blog/the-process-itself-is-the-goal/</id>
		<content type="html">&lt;h2 id=&quot;how-to-focus-and-have-self-discipline&quot;&gt;How to focus and have self-discipline&lt;&#x2F;h2&gt;
&lt;p&gt;No goal should be an achievement on its own, but the process itself that helps us to go in the direction of these goals.
Goals, in business and in life in general, should be conceived as directions, where their real intention is to help us accomplish more in the way we planned or want.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If we get rewarded only for results and not for processes, we will become pretty miserable.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Society doesn‚Äôt reward the journey, but the results. And that‚Äôs exactly part of the problem when you are too focused on how society acts on you. Of course, it‚Äôs important to listen to society, but it‚Äôs more important to listen to ourselves in order to improve constantly. Continuous improvement doesn‚Äôt apply to software only but to everything in life.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-do-i-keep-myself-focused&quot;&gt;How do I keep myself focused?&lt;&#x2F;h2&gt;
&lt;p&gt;This is a totally subjective topic that might be different from person to person. That said, I think it might be useful to share my thoughts with you, so I‚Äôll do it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-reflection&quot;&gt;Self-reflection&lt;&#x2F;h3&gt;
&lt;p&gt;I used to write my thoughts in a ‚Äúdiary‚Äù for some years. Back then, in 2015, when I moved to Germany, I didn‚Äôt know many people here and the environment was completely new.
I decided to write my thoughts to myself in order to read them the day after and do some retrospection about it. Finally, after around 3 years, in December 2017, I published a book named ‚ÄúOjos en un recuerdo‚Äù. That book is the compilation of those thoughts. No story behind it. They are as they came. You can see the evolution of the topics and about what and how they were written.&lt;&#x2F;p&gt;
&lt;p&gt;The exercise of self-reflection itself was more important than the book! The goal here wasn‚Äôt writing a book at all. The goal was the self-projection to understand what was going on inside myself. Publishing those thoughts in a book was an accident. A beautiful accident, though.
This habit of thinking about my actions and decisions (what do I do and why) helped me to develop who am I nowadays.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sports&quot;&gt;Sports&lt;&#x2F;h3&gt;
&lt;p&gt;Exercise helps my mind to disconnect from the tech area. It keeps my body active using some energy in a different environment. But most importantly, it helps to get fully tired before going to bed. I feel myself resting much better if I‚Äôve done some sport during the day: contact sports, fitness studio, or simply running.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The specific sport itself is an irrelevant detail as far as you feel comfortable. The act of doing sport is the key here.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;books&quot;&gt;Books&lt;&#x2F;h3&gt;
&lt;p&gt;I try to read tech throughout the day and non-tech during the night. For example, some days before going to work or after working time I might read a tech book. And some days before going to sleep I like to read a non-tech one. This way, I feed my brain with knowledge and I also provide it with non-tech space, so it can rest from code and enjoy other ‚Äúuniverses‚Äù as well.
Some suggestions that helped me to understand how we behave, why we do what we do, and therefore build some habits that I didn‚Äôt know how to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The power of Habits, by Charles Duhigg.&lt;&#x2F;li&gt;
&lt;li&gt;Atomic Habits, by James Clear.&lt;&#x2F;li&gt;
&lt;li&gt;Scrum: Doing Twice the Work in Half the Time, by Jeff Sutherland.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;personal-tricks&quot;&gt;Personal tricks&lt;&#x2F;h2&gt;
&lt;p&gt;I wish I would have read much more. Nowadays, with the number of distractions that we have, keeping yourself focused is pretty hard. Some tricks that help me a lot when I want to focus:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I keep my personal phone always in silence and vibration mode.&lt;&#x2F;li&gt;
&lt;li&gt;I used to spend hours on social media; a lot of time wasted. Not anymore. I reduced the social media noise to the minimum by removing the apps that prevent me from being as productive as I want. Some of them from my phone, others the account itself.&lt;&#x2F;li&gt;
&lt;li&gt;I used to play video games. Not anymore. Instead, I go to Github to work on my pet projects, contribute to an open-source project, or simply read a book.&lt;&#x2F;li&gt;
&lt;li&gt;When I go for a run, I enjoy it twice by listening to a 45 min podcast that I want to listen to since the very morning. The reward of listening to the podcast is linked with the act of going out and run. I conscientiously created that habit.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;It‚Äôs not about removing your old habits but replacing them with new ones.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;how-to-improve-your-habits&quot;&gt;How to improve your habits&lt;&#x2F;h3&gt;
&lt;p&gt;Habits emerge without our consent. To save energy, the brain creates a habit loop that looks for a trigger to cue a behavior.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Willpower can be learned. It needs exercise, like a muscle.&lt;&#x2F;li&gt;
&lt;li&gt;Small successes are the building blocks of bigger wins.&lt;&#x2F;li&gt;
&lt;li&gt;Focus less on goals and more on systems and processes.&lt;&#x2F;li&gt;
&lt;li&gt;To change habits, change how you identify yourself.&lt;&#x2F;li&gt;
&lt;li&gt;To build good habits, the environment is more important than being motivated.&lt;&#x2F;li&gt;
&lt;li&gt;To break a bad habit, reduce exposure to the cues that cause it.&lt;&#x2F;li&gt;
&lt;li&gt;Bundle an action you want to do with an action you need to do.&lt;&#x2F;li&gt;
&lt;li&gt;Don‚Äôt try to make a habit perfect, just repeat it.&lt;&#x2F;li&gt;
&lt;li&gt;Reduce friction for good habits and increase friction for bad habits.&lt;&#x2F;li&gt;
&lt;li&gt;Like in Scrum, removing waste is fundamental to get better.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Repetition is the key. Make it easier to do what you want to do. Make it harder to do what you want to stop doing. Enjoy the process: that‚Äôs the goal.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;interesting-links&quot;&gt;Interesting links&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;heleo.com&#x2F;charles-duhigg-13-key-insights-charles-duhiggs-power-habit&#x2F;2026&#x2F;&quot;&gt;13 key insights from The Power of Habit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@saurinparikh&#x2F;the-most-interesting-useful-takeaways-from-atomic-habits-9acc20bdc858&quot;&gt;The most interesting takeaways from Atomic Habits&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Strict Types in PHP</title>
		<published>2020-08-09T00:00:00+00:00</published>
		<updated>2020-08-09T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/strict-types/" type="text/html"/>
		<id>https://chemaclass.es/blog/strict-types/</id>
		<content type="html">&lt;p&gt;In December 2015, PHP 7 introduced scalar type declarations and with it the strict types flag.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;To enable the strict mode, a single declare directive must be placed at the top of the file. This means that the strictness of typing for scalars is configured on a per-file basis. This directive not only affects the type declarations of parameters, but also a function‚Äôs return type.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The good thing about declaring a PHP file as strict is that it actually applies to &lt;strong&gt;ONLY the current file&lt;&#x2F;strong&gt;. It ensures that this file has strict types, but it doesn‚Äôt apply to any other file in the whole project. It allows you to do, step by step, this migration from non-strict code to strict code, especially for new files or projects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;strict-types-affect-coercion-types&quot;&gt;Strict types affect coercion types&lt;&#x2F;h2&gt;
&lt;p&gt;Using hint type without &lt;code&gt;strict_types&lt;&#x2F;code&gt; may lead to subtle bugs.&lt;&#x2F;p&gt;
&lt;p&gt;Without this, &lt;code&gt;int $x&lt;&#x2F;code&gt; meant &lt;code&gt;$x must have a value coercible to an int&lt;&#x2F;code&gt;. Any value that could be coerced to an int would pass the hint type, including:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a proper &lt;code&gt;int&lt;&#x2F;code&gt; (example: 42 -&amp;gt; 42)&lt;&#x2F;li&gt;
&lt;li&gt;a &lt;code&gt;float&lt;&#x2F;code&gt; (example: 13.1459 -&amp;gt; 13)&lt;&#x2F;li&gt;
&lt;li&gt;a &lt;code&gt;bool&lt;&#x2F;code&gt; (example: true -&amp;gt; 1)&lt;&#x2F;li&gt;
&lt;li&gt;a &lt;code&gt;null&lt;&#x2F;code&gt; (example: null -&amp;gt; 0)&lt;&#x2F;li&gt;
&lt;li&gt;a &lt;code&gt;string&lt;&#x2F;code&gt; with leading digits (example: ‚Äú15 Trees‚Äù -&amp;gt; 15)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By setting &lt;code&gt;strict_types=1&lt;&#x2F;code&gt;, you tell the engine that int $x means $x must only be an int proper, no type coercion allowed. You have the great assurance you&#x27;re getting exactly and only what was given, without any conversion or potential loss.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;who-should-care-about-this-strict-type-line&quot;&gt;Who should care about this ‚Äústrict type‚Äù line?&lt;&#x2F;h2&gt;
&lt;p&gt;Actually, declare(strict_types=1); is more for the reader than for the writer. Why? Because it will explicitly tell the reader:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The types in this current scope (file&#x2F;class) are treated strictly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;strict-types-1-is-more-for-the-reader-than-for-the-writer&quot;&gt;&#x27;strict_types=1&#x27; is more for the reader than for the writer&lt;&#x2F;h2&gt;
&lt;p&gt;The writer just needs to maintain such strictness while writing the expected behavior. That said, as a writer, you should care about your readers, which also includes your future self. Because you are going to be one of them.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;php.chemaclass.com&#x2F;technical-skills&#x2F;strict-types.html&quot;&gt;PHP Best Practices&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;migration70.new-features.php#migration70.new-features.scalar-type-declarations&quot;&gt;Scalar type declarations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;48723637&#x2F;what-do-strict-types-do-in-php&#x2F;48723830#48723830&quot;&gt;What do strict types do in PHP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The art of refactoring</title>
		<published>2020-06-28T00:00:00+00:00</published>
		<updated>2020-06-28T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/art-refactoring/" type="text/html"/>
		<id>https://chemaclass.es/blog/art-refactoring/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;TL;DR: If you see something, in the scope of your current task, that can be easily improved, improve it. And if you have any questions about it, ask.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;what-is-refactoring&quot;&gt;What is refactoring?&lt;&#x2F;h2&gt;
&lt;p&gt;Refactoring means improving your code. It can go from making a variable name more readable, extract some lines of code into a private method, or separate the responsibilities of a class into subclasses, for example.&lt;&#x2F;p&gt;
&lt;p&gt;Refactoring is the action of showing that you care about what you do as a professional. It can be a controversial topic; it is indeed one of the major controversial topics since a long time ago. But we shouldn‚Äôt stop trying our best in order to improve the quality of the system just because of that controversiality.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;when-and-how-should-we-refactor&quot;&gt;When and how should we refactor?&lt;&#x2F;h2&gt;
&lt;p&gt;Always in the scope of your current task unless it is an already planned task, something like ‚Äúarchitecture refactoring‚Äù or similar, where the scope of the task is actually to do refactoring.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Refactoring should be part of our daily job, not a separate task by default.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We do not need to ask permission to refactor. Or do we ask our managers for permission to do our best job?&lt;&#x2F;p&gt;
&lt;p&gt;In order to do proper refactoring, the intention of such refactoring needs to be clear. What is intended to achieve and how? Pair programming (or even pair thinking!) certainly helps in this topic because it syncs two brains on the same topic and that encourages team building and a better understanding of them.&lt;&#x2F;p&gt;
&lt;p&gt;Applying refactoring in a collaborative way, in a ‚Äúbidirectional channel‚Äù, is fundamental when working within a team. Refactoring shouldn‚Äôt be a tabu topic, on the contrary: it will be helpful in order to unify the goals and the direction of the team code quality.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;some-personal-advice-about-the-how&quot;&gt;Some personal advice about the ‚Äúhow‚Äù&lt;&#x2F;h3&gt;
&lt;p&gt;Continuous improvement is what we‚Äôre looking for within this topic, but‚Ä¶&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you realize your changes are generating more noise than help, stop immediately and think again if your changes are worth in the current system status.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Maybe it‚Äôs not the right moment for that refactoring.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe you are polluting your current diff with out-scoped changes.&lt;&#x2F;p&gt;
&lt;p&gt;Or, maybe, your refactoring idea is too big to be applied in your current task. In such a case, a follow-up task (in order to apply the refactoring) would be a better idea.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you see that refactoring is perhaps needed even before starting your current task, do the refactoring first.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We usually refactor in order to increase our productivity, making the code more readable and therefore easier to understand.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h3&gt;
&lt;p&gt;Be aware that you should have a pretty well suite of tests covering the logic that you might have changed. Without tests, refactoring can be really risky. Usually, the easier something is to be tested, the easier it is to be replaced or removed.&lt;&#x2F;p&gt;
&lt;p&gt;You can read more about how testing is related to quality here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-should-we-do-it&quot;&gt;Why should we do it?&lt;&#x2F;h2&gt;
&lt;p&gt;Wouldn‚Äôt you want to have a better system as time goes by?&lt;&#x2F;p&gt;
&lt;h4 id=&quot;software-isn-t-like-wine-it-doesn-t-get-better-as-time-passes-by-therefore-if-you-want-to-have-a-better-system-you-must-work-for-it&quot;&gt;Software isn‚Äôt like wine: it doesn‚Äôt get better as time passes by. Therefore, if you want to have a better system you must work for it.&lt;&#x2F;h4&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Final classes in PHP|Java|Any</title>
		<published>2020-06-06T00:00:00+00:00</published>
		<updated>2020-06-06T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/final-classes/" type="text/html"/>
		<id>https://chemaclass.es/blog/final-classes/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;TL;DR: Benefits of final classes: clear contracts, isolated side effects, testability, low complexity and cognitive load, code fluidity, and confidence in yourself.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;reduce-the-scope-visibility-to-the-minimum&quot;&gt;Reduce the scope visibility to the minimum&lt;&#x2F;h3&gt;
&lt;p&gt;When you see a class prefix with final you will prevent a particular class to be extended by any other, which not only makes it more readable but also makes you be sure that the scope of the logic where you are is limited to that particular class.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;encourage-composition-over-inheritance-mentality&quot;&gt;Encourage ‚Äúcomposition over inheritance‚Äù mentality&lt;&#x2F;h3&gt;
&lt;p&gt;The Open-Close Principle states: open for extension but close for modification.&lt;&#x2F;p&gt;
&lt;p&gt;If for any reason, a good one you should be completely aware of, you decide to create an inheritance there, well, then just drop the final keyword and you are good to go.&lt;&#x2F;p&gt;
&lt;p&gt;When you ‚Äúby default‚Äù can‚Äôt extends from a class (because it‚Äôs final), you will help yourself by thinking about using composition instead of inheritance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-isn-t-this-class-final&quot;&gt;Why isn‚Äôt this class final?&lt;&#x2F;h2&gt;
&lt;p&gt;If we aim for composition over inheritance, then we should try to avoid inheritance as much as possible, and use it only when it‚Äôs really necessary. Inheritance is often misused in OOP.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;misconception&quot;&gt;Misconception&lt;&#x2F;h3&gt;
&lt;p&gt;When we first taught OOP, we usually introduced the classic inheritance example.&lt;&#x2F;p&gt;
&lt;p&gt;Nonetheless, when Alan Kay created Smalltalk, the inheritance was never the main concept of it. The main concept was messaging, which is that you can send messages to objects and they encapsulate the data and logic in it, and you can change their behavior by using different objects, which is actually composition. But the concept of inheritance is too popular that eventually overshadows composition.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;benefits&quot;&gt;Benefits&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Clear contracts. Using interfaces will force you to think in terms of communication between objects.&lt;&#x2F;li&gt;
&lt;li&gt;Isolated, side effect free code units. Injecting interfaces only as dependencies will remove every nasty side effect around the code you are working on.&lt;&#x2F;li&gt;
&lt;li&gt;Testability. Mocking dependencies is extremely easy when they are interfaces.&lt;&#x2F;li&gt;
&lt;li&gt;Low, manageable complexity. Since everything is isolated, you won‚Äôt need to worry about rippling changes. This dramatically decreases the complexity of your code.&lt;&#x2F;li&gt;
&lt;li&gt;Low cognitive load. With decreased complexity, your brain will be free to focus on what matters.&lt;&#x2F;li&gt;
&lt;li&gt;Code fluidity. By removing any unnecessary coupling, you will be able to move things around way more easily than before.&lt;&#x2F;li&gt;
&lt;li&gt;Confidence in yourself. Being able to test your code in isolation so well will give you a wonderful sense of confidence in changing it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;composition-over-inheritance&quot;&gt;Composition over inheritance&lt;&#x2F;h2&gt;
&lt;p&gt;If you feel the need to reconfigure an object, to change parts of an algorithm, or to rewrite part of the implementation, consider creating a new class instead of overriding an existing class.
If you need to represent a hierarchy of classes, where subclasses are proper substitutes for their parent classes. This would be the classic situation where you may still consider inheritance. However, the result may even be better if you don‚Äôt inherit from concrete parent classes but from abstract interfaces.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-you-should-start-doing-instead&quot;&gt;What you should start doing instead&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Use interfaces to define the contracts between your classes.&lt;&#x2F;li&gt;
&lt;li&gt;Use final classes to implement behavior for those interfaces.&lt;&#x2F;li&gt;
&lt;li&gt;Use composition (using dependency injection through constructor) to put things together and prevent complexity.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Interfaces -&amp;gt; Final classes -&amp;gt; Composition&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Art of Testing: where design meets quality</title>
		<published>2020-04-07T00:00:00+00:00</published>
		<updated>2020-04-07T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/the-art-of-testing/" type="text/html"/>
		<id>https://chemaclass.es/blog/the-art-of-testing/</id>
		<content type="html">&lt;p&gt;The intention of this post is not to explain the different testing techniques out there that we can use. I&#x27;m not going to tell you what the differences are between unit, integration, feature, or end-to-end testing.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m going to tell you why we should consider testing as part of our daily development and how it&#x27;s directly linked to the software quality.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m still amazed by the lack of experience about testing in software in general. Common ignorance in this world about best testing practices for us as developers. Inexperience that you can easily see if you have already worked on some different projects and teams.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;software-testing&quot;&gt;Software testing&lt;&#x2F;h3&gt;
&lt;p&gt;Some horrible patterns I&#x27;ve seen (and done):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Testing for the sake of testing: testing every single file, sometimes wrongly considered as a unit.&lt;&#x2F;li&gt;
&lt;li&gt;Mocking every class that we intend to test, overriding the real implementation, and creating a fake-behavior, therefore providing a false coverage perception.&lt;&#x2F;li&gt;
&lt;li&gt;Coupling production code with tests everywhere so it&#x27;s impossible to change anything without breaking some tests, even if the feature itself it&#x27;s working as intended.&lt;&#x2F;li&gt;
&lt;li&gt;Not testing at all because ‚Äúwhy should we even test anything if the feature it&#x27;s done and it works? Why should we spend more time on this if it&#x27;s done?‚Äù.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One of the main reasons for software testing is actually verifying a suite of proofs for the expected behavior of the final software piece. However, testing can (and should) be more than that.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;software-design&quot;&gt;Software design&lt;&#x2F;h3&gt;
&lt;p&gt;Software design goes from algorithm to architecture design. Even when I believe these two levels of components have different needs and requirements, they still share some common patterns. For example, testing. And this is what we are going to talk about right now:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If it&#x27;s easy to test, it will likely be because of good design.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;software-quality&quot;&gt;Software quality&lt;&#x2F;h3&gt;
&lt;p&gt;Is quality hard to measure out? Indeed. There are different measurement keys that we should take while considering quality for any piece of software. But I&#x27;m sure we could agree on this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you aim for quality in your software, you better aim for a good design.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Testing by itself means ‚Äúproving‚Äù, as we all know. But how difficult it turns sometimes to prove some logic, that we finally give up because of its complexity itself?&lt;&#x2F;p&gt;
&lt;p&gt;The art of testing is about being able to use testing itself to help and contribute to the final result. If we&#x27;re able to use testing (of any kind) in our favor, depending on the context of what we want to prove, to encourage good design, it will certainly help us to increase the end quality of the product.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Therefore, testing should be used not only to prove the behavior of our software but also to guide our software to a better design.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Should we test everything? Well, that&#x27;s the million $ question. In my opinion, everything depends on the context. We might encounter situations where tests might be not really useful. That said, we should write our code as if it could be tested anyway.&lt;&#x2F;p&gt;
&lt;p&gt;Easily testable code tends to better design and therefore better quality.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How to improve your tech-talk (or any other presentation)</title>
		<published>2019-11-18T00:00:00+00:00</published>
		<updated>2019-11-18T00:00:00+00:00</updated>
		<link href="https://chemaclass.es/blog/improve-your-tech-talk/" type="text/html"/>
		<id>https://chemaclass.es/blog/improve-your-tech-talk/</id>
		<content type="html">&lt;p&gt;We cannot negate that we‚Äôve found ourselves attending one meeting that felt like we were wasting our time with a ‚Äúmonologue‚Äù that is either hard to follow or doesn‚Äôt seem so interesting as it could.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore, I was thinking about it, and I tried to get some keys to improving their general quality. It applies to all presentations but also tech-talks and other tech presentations in which engineers are usually involved.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;structure-of-the-talk&quot;&gt;Structure of the talk&lt;&#x2F;h2&gt;
&lt;p&gt;To explain how I think a good presentation should look like I will address three main topics that are relevant to structure and design your presentation.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Content of the presentation: what message do you want to convey to whom and how?&lt;&#x2F;li&gt;
&lt;li&gt;Design and Layout: how you can design an easy-to-follow presentation that supports your talk instead of taking away the attention from what you are actually trying to say.&lt;&#x2F;li&gt;
&lt;li&gt;Lastly, I think also the audience is responsible for making a tech talk successful, so I will also add a reminder about the role and responsibilities of the listeners.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;consider-your-audience&quot;&gt;Consider your audience&lt;&#x2F;h3&gt;
&lt;p&gt;When you prepare your presentation, ask yourself:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Who is attending the talk?&lt;&#x2F;li&gt;
&lt;li&gt;Which backgrounds do they have?&lt;&#x2F;li&gt;
&lt;li&gt;Which position do they have?&lt;&#x2F;li&gt;
&lt;li&gt;Which information is relevant to them?&lt;&#x2F;li&gt;
&lt;li&gt;Do they have to know all the keywords that you would like to use?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;introduce-the-topic&quot;&gt;Introduce the topic&lt;&#x2F;h3&gt;
&lt;p&gt;Create some atmosphere. Try to answer these questions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Why should they listen to you?&lt;&#x2F;li&gt;
&lt;li&gt;Why should they spend their time in another meeting?&lt;&#x2F;li&gt;
&lt;li&gt;What will they have learned by the end of the talk?&lt;&#x2F;li&gt;
&lt;li&gt;What is your main message?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Every meeting should have an output and an outcome. Keep it in mind.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-a-storyline&quot;&gt;Create a Storyline&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;When preparing the main content of your talk, think about a storyline that connects your arguments. This makes it easier for the audience to follow.&lt;&#x2F;li&gt;
&lt;li&gt;Stick to the messages that are necessary to explain your idea or concept.&lt;&#x2F;li&gt;
&lt;li&gt;Leave out any unnecessary information that is not relevant to the core of your message.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;build-a-conclusion&quot;&gt;Build a conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;Summarize the main conclusion(s) in a concise way:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What is the conclusion of this meeting?&lt;&#x2F;li&gt;
&lt;li&gt;What are the learnings from this meeting?&lt;&#x2F;li&gt;
&lt;li&gt;What are the open questions or next steps?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;design-and-layout&quot;&gt;Design and Layout&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;write-less-talk-more&quot;&gt;Write less, talk more&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;A tech-talk is about learning new ideas and concepts.&lt;&#x2F;li&gt;
&lt;li&gt;A presentation should support your talk, not replace or replicate what you have said.&lt;&#x2F;li&gt;
&lt;li&gt;The more words on the slide, the fewer they will be remembered.&lt;&#x2F;li&gt;
&lt;li&gt;Use visuals&#x2F;graphics that support your talk instead of additional text.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;large-fonts&quot;&gt;Large fonts&lt;&#x2F;h3&gt;
&lt;p&gt;If you have some code to present, consider:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If it is a picture: use large fonts inside. I recommend using https:&#x2F;&#x2F;carbon.now.sh&#x2F; for simple snippets. Or just screenshots from your favorite IDE.&lt;&#x2F;li&gt;
&lt;li&gt;If you will code in live: prepare your editor in advance. Use the Presentation Mode of your IDE.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;role-of-the-audience&quot;&gt;Role of the Audience&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;responsibilities-of-the-attendee&quot;&gt;Responsibilities of the attendee&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;No unnecessary phone usage, like Twitter, Instagram, Facebook, WhatsApp, Telegram, etc.&lt;&#x2F;li&gt;
&lt;li&gt;Keep your questions for the questions time, unless the presenter mentions at the very beginning that you can ask at any moment. Usually, it‚Äôs better not to interrupt the topic, so we can ask the questions at the end.&lt;&#x2F;li&gt;
&lt;li&gt;Show interest in the topic. The presenter should have spent some time preparing the slides for you.&lt;&#x2F;li&gt;
&lt;li&gt;Pair with the presenter the interest of the topic. This is also the responsibility of the presenter. You both should be eager to learn more about the topic.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;inner-questions&quot;&gt;Inner questions&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Was it worth the time that we all spent in this room?&lt;&#x2F;li&gt;
&lt;li&gt;Do we regret the attendance of this meeting?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;At the end of the meeting, we should ask these questions in order to improve. Ask other people for their feedback, so we can grow further and together.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
